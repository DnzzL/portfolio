---
import { Image } from 'astro:assets';
import resumeData from '@config/resume.json';
import config from '@config/config.json';

// Defensive destructuring
const { basics = {}, work = [], education = [], skills = [], projects = [], volunteer = [] } = resumeData || {};

// Robust formatter: returns "Present" when no date is supplied
const formatDate = (dateString) => {
  if (!dateString) return 'Present';
  try {
    const date = new Date(dateString);
    return new Intl.DateTimeFormat('en', { month: 'short', year: 'numeric' }).format(date);
  } catch (e) {
    return dateString;
  }
};

// Exact months/years difference (no 30-day approximation)
const calculateDuration = (startDate, endDate) => {
  if (!startDate) return '';
  const s = new Date(startDate);
  const e = endDate ? new Date(endDate) : new Date();

  // Calculate total months between dates
  let totalMonths = (e.getFullYear() - s.getFullYear()) * 12 + (e.getMonth() - s.getMonth());
  // If day of month in end is earlier than start, subtract one month
  if (e.getDate() < s.getDate()) totalMonths -= 1;
  if (totalMonths < 0) totalMonths = 0;

  const years = Math.floor(totalMonths / 12);
  const months = totalMonths % 12;

  if (years === 0 && months === 0) return '0mo';
  if (years === 0) return `${months}mo`;
  if (months === 0) return `${years}y`;
  return `${years}y ${months}mo`;
};

// Normalize skills: JSON Resume "skills" might be array of objects or strings
const normalizeSkills = (skillsInput) => {
  if (!Array.isArray(skillsInput)) return [];
  return skillsInput.map(s => {
    if (typeof s === 'string') return { name: s };
    if (s && typeof s === 'object') return { name: s.name || s.label || '', level: s.level };
    return { name: String(s) };
  }).filter(Boolean);
};

const normalizedSkills = normalizeSkills(skills);
const mainSkills = ['TypeScript', 'React.js', 'Vue.js', 'Node.js', 'LLM', 'Python', 'MongoDB', 'PostgreSQL', 'GraphQL', 'Docker'];
const techSkills = normalizedSkills.filter(s => mainSkills.includes(s.name));
const otherSkills = normalizedSkills.filter(s => !mainSkills.includes(s.name));

// Sort experiences: ongoing jobs (no endDate) first, then by startDate desc
const workExperience = (Array.isArray(work) ? work.slice() : []).sort((a, b) => {
  const aOngoing = !a.endDate;
  const bOngoing = !b.endDate;
  if (aOngoing && !bOngoing) return -1;
  if (bOngoing && !aOngoing) return 1;
  return new Date(b.startDate || 0) - new Date(a.startDate || 0);
}).map(job => ({
  ...job,
  duration: calculateDuration(job.startDate, job.endDate),
}));

const educationData = (Array.isArray(education) ? education : []).map(edu => ({
  ...edu,
  formattedDate: `${formatDate(edu.startDate)} - ${formatDate(edu.endDate)}`,
}));

const projectData = (Array.isArray(projects) ? projects : []).map(project => ({
  ...project,
  formattedDate: `${formatDate(project.startDate)} - ${formatDate(project.endDate)}`,
}));

const volunteerData = (Array.isArray(volunteer) ? volunteer : []).map(v => ({
  ...v,
  formattedDate: `${formatDate(v.startDate)} - ${formatDate(v.endDate)}`,
}));

const linkedInProfile = basics.profiles ? basics.profiles.find(p => /linkedin/i.test((p.network || '') + (p.url || ''))) : null;
const githubProfile = basics.profiles ? basics.profiles.find(p => /github/i.test((p.network || '') + (p.url || ''))) : null;

// Create basic JSON-LD for SEO / structured data (Person)
const jsonLd = {
  "@context": "https://schema.org",
  "@type": "Person",
  "name": basics.name || '',
  "email": basics.email ? `mailto:${basics.email}` : undefined,
  "jobTitle": basics.label || undefined,
  "sameAs": basics.profiles ? basics.profiles.map(p => p.url) : undefined
};

// Expose a safe, serialized version for client-side scripts (download button)
const __RESUME_FOR_CLIENT = JSON.stringify({ basics: basics || {}, work: work || [], education: education || [], skills: normalizedSkills || [], projects: projectData || [], volunteer: volunteerData || [] });
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>{basics.name ? `${basics.name} â€” Resume` : 'Resume'}</title>
    <script type="application/ld+json">{JSON.stringify(jsonLd)}</script>
    <style>
      :root{
        --bg: #fff;
        --text: #0f1724;
        --muted: #6b7280;
        --accent: linear-gradient(90deg,#7c3aed 0%, #06b6d4 100%);
        --accent-solid: #7c3aed;
        --accent-2: #06b6d4;
        --border: #e6eef6;
        --card-bg: #fff;
        --radius: 10px;
        font-family: Inter, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, 'Helvetica Neue', Arial;
        font-size: 14px; /* base */
        color: var(--text);
      }

      @media (prefers-color-scheme: dark) {
        :root {
          --bg: #020617;
          --text: #e6eef6;
          --muted: #9aa7b6;
          --border: #122031;
          --card-bg: #061126;
        }
        body { background: var(--bg); }
      }

      /* Basic layout */
      body { background: var(--bg); margin:0; padding:0; line-height:1.4; -webkit-font-smoothing:antialiased; }
      .container { max-width: 980px; margin: 0 auto; padding: 20px; }

      /* Typographic rhythm and coherence */
      h1 { font-size: 1.6rem; margin: 0 0 4px 0; font-weight:800; letter-spacing: -0.01em; }
      h2 { font-size: 1rem; margin: 0; font-weight:700; }
      h3 { font-size: 0.9375rem; margin: 0; font-weight:600; }
      p, li { font-size: 0.95rem; margin: 0; }
      .text-sm { font-size: 0.9rem; }
      .text-xs { font-size: 0.8125rem; }

      /* Grid */
      .grid { display: grid; gap: 18px; grid-template-columns: 1fr; }
      @media (min-width: 1024px) { .grid { grid-template-columns: 280px 1fr; align-items: start; } }

      .card{ background: var(--card-bg); border-radius: var(--radius); padding: 14px; border: 1px solid var(--border); box-shadow: 0 6px 18px rgba(12,12,20,0.04); }

      /* Header / hero */
      .hero { display:flex; gap:16px; align-items:center; }
      .hero .meta { flex:1; }
      .avatar { width:84px; height:84px; border-radius: 12px; overflow:hidden; flex-shrink:0; }
      .avatar img{ width:100%; height:100%; object-fit:cover; }
      .summary { color: var(--muted); margin-top:10px; }

      /* Sidebar */
      .caps { font-size: 0.75rem; text-transform:uppercase; letter-spacing:0.08em; font-weight:700; color:var(--muted); }
      .skill-pill{ display:inline-block; padding:6px 10px; border-radius:999px; font-size:0.82rem; margin:4px 6px 4px 0; background: rgba(124,58,237,0.06); border:1px solid rgba(124,58,237,0.08); }

      /* Experience list */
      .experience-section article{ padding: 10px 0; border-bottom: 1px dashed var(--border); }
      .experience-section article:last-child{ border-bottom: none; padding-bottom:0; }
      .job-head{ display:flex; justify-content:space-between; gap:12px; }
      .job-meta { color:var(--muted); font-size:0.9rem; }
      .job-dates{ text-align:right; min-width:120px; color:var(--muted); font-size:0.85rem; }

      /* Compact summaries to fit more on a page. screen: 4 lines, print: 2 lines */
      .job-summary{ margin-top:8px; color:var(--muted); font-size:0.95rem; display:-webkit-box; -webkit-box-orient:vertical; overflow:hidden; }
      /*.job-summary.screen-clamp { -webkit-line-clamp:4; }*/
      /*@media print { .job-summary.screen-clamp { -webkit-line-clamp:2; } }*/

      ul.job-highlights{ margin-top:8px; padding-left:18px; color:var(--text); font-size:0.95rem; }
      ul.job-highlights li{ margin-bottom:6px; }

      /* Projects/Volunteer */
      .muted { color:var(--muted); }
      .project-row, .vol-row{ margin-bottom:10px; }

      /* Buttons */
      .controls { display:flex; gap:10px; justify-content:center; margin-top:14px; }
      .btn { background:var(--accent-solid); color:white; padding:8px 12px; border-radius:8px; border:0; cursor:pointer; font-weight:600; }
      .btn.secondary { background:transparent; color:var(--accent-solid); border:1px solid rgba(124,58,237,0.12); }

      /* Print styles */
      @media print{
        :root{ font-size: 12px; }
        body{ background: #fff; color:#000; }
        .print-hidden{ display:none !important; }
        .print-only {
            display: block !important;
          }
        .card{ box-shadow:none; border-radius:0; border:none; padding:6px 0; }
        .container{ padding:0; max-width:100%; }
        .grid{ gap:8px; }
        a::after{ content: " (" attr(href) ")"; font-size:90%; }
        /* Make sure we don't break inside items */
        .avoid-break{ page-break-inside: avoid; }
        /* Squeeze vertical rhythm */
        .experience-section article{ padding:6px 0; }
        /*.job-summary.screen-clamp{ -webkit-line-clamp:2; }*/
      }

      /* Small helpers */
      .flex{ display:flex; }
      .justify-between{ justify-content:space-between; }
      .text-right{ text-align:right; }
      .mb-1{ margin-bottom:6px; }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="grid" role="main">
        <!-- Sidebar -->
        <aside class="card print-hidden avoid-break">
          <div class="hero">
            <div class="meta">
                <div class="flex">
                    <div class="flex flex-col">
                        <h1>{basics.name}</h1>
                        <div class="muted text-sm">{basics.label}</div>
                    </div>
                    {config.author?.avatar ? (
                      <div class="avatar" title={config.author.name || ''}>
                        <Image src={config.author.avatar} alt={config.author.name || 'avatar'} width={160} height={160} />
                      </div>
                    ) : null}
                </div>
              <div class="summary text-sm">{basics.summary}</div>
            </div>

          </div>

          <hr style="margin:12px 0;border:none;border-top:1px solid var(--border)" />

          <section aria-labelledby="skills-heading">
            <h2 id="skills-heading" class="caps">Skills</h2>
            <div style="margin-top:8px;">
              {techSkills.length ? techSkills.map(s => (
                <span class="skill-pill" key={s.name}>{s.name}{s.level ? ` â€¢ ${s.level}` : ''}</span>
              )) : <div class="muted text-sm">No core skills listed</div>}
            </div>

            {otherSkills.length > 0 && (
              <div style="margin-top:10px;">
                <h3 class="caps text-xs">Other</h3>
                <div style="margin-top:6px;">{otherSkills.map(s => (<span class="skill-pill" key={s.name}>{s.name}</span>))}</div>
              </div>
            )}
          </section>

          <hr style="margin:12px 0;border:none;border-top:1px solid var(--border)" />

          <section aria-labelledby="edu-heading">
            <h2 id="edu-heading" class="caps">Education</h2>
            <div style="margin-top:8px;">
              {educationData.length ? educationData.map(edu => (
                <div key={edu.institution} class="mb-1">
                  <h3 class="m-0 text-sm">{edu.institution}</h3>
                  <div class="muted text-xs">{edu.area}</div>
                  <div class="muted text-xs">{edu.formattedDate}</div>
                </div>
              )) : <div class="muted text-sm">No formal education listed</div>}
            </div>
          </section>

          <hr style="margin:12px 0;border:none;border-top:1px solid var(--border)" />

          <section aria-labelledby="contact-heading">
            <h2 id="contact-heading" class="caps">Contact</h2>
            <div style="margin-top:8px;" class="text-sm muted">
              {basics.email ? (<div>{basics.email}</div>) : null}
              {basics.phone ? (<div>{basics.phone}</div>) : null}
              {basics.location ? (<div>{basics.location.city}{basics.location.region ? `, ${basics.location.region}` : ''}</div>) : null}
              <div style="margin-top:6px;">
                {linkedInProfile ? (<div><a href={linkedInProfile.url} target="_blank" rel="noopener noreferrer">LinkedIn</a></div>) : null}
                {githubProfile ? (<div><a href={githubProfile.url} target="_blank" rel="noopener noreferrer">GitHub</a></div>) : null}
              </div>
            </div>
          </section>
        </aside>

        <!-- Main column -->
        <main>
          <!-- Compact contact header for print / small screens -->
          <header class="card avoid-break print-only" style="display:none">
            <div class="flex justify-between -mt-12">
              <div>
                <h1 class="m-0">{basics.name}</h1>
                <div class="muted text-sm">{basics.label}</div>
                <div class="muted text-xs">{basics.email} {basics.phone ? `â€¢ ${basics.phone}` : ''}</div>
              </div>
              {config.author?.avatar ? (
                <div>
                  <img src={config.author.avatar} alt={config.author.name || 'avatar'} style="width:64px;height:64px;border-radius:8px;object-fit:cover" />
                </div>
              ) : null}
            </div>
          </header>

          <!-- Experience -->
          <section class="card experience-section">
            <h2 class="caps mb-1">Professional Experience</h2>
            <div>
              {workExperience.map(job => (
                <article key={`${job.name}-${job.position}`} class="avoid-break">
                  <div class="job-head">
                    <div>
                      <h3>{job.position}</h3>
                      <div class="job-meta">{job.name} {job.location ? `â€¢ ${job.location}` : ''}</div>
                    </div>
                    <div class="job-dates">
                      <div>{formatDate(job.startDate)} â€” {formatDate(job.endDate)}</div>
                      <div class="text-xs muted">{job.duration}</div>
                    </div>
                  </div>

                  {job.summary?.split("\n").map((line, index) => (
                      <Fragment key={index}>
                        {line}
                        <br />
                      </Fragment>
                    ))}

                  {job.highlights && job.highlights.length ? (
                    <ul class="job-highlights">
                      {job.highlights.map((h, idx) => (<li key={idx}>{h}</li>))}
                    </ul>
                  ) : null}
                </article>
              ))}
            </div>
          </section>

          <!-- Educations -->
          <section class="card avoid-break print-only mt-3 print-only" style="display:none">
            <h2 class="caps mb-1">Education</h2>
            <div>
              {educationData.map(e => (
                <div key={e.institution} class="edu-row">
                    <h3 class="m-0">{e.institution} <span class="muted text-xs">â€¢ {e.formattedDate}</span> <span class="muted text-xs">â€¢ {e.area}</h3>
                </div>
              ))}
            </div>
          </section>

          <!-- Projects -->
          {projectData.length ? (
            <section class="card avoid-break mt-3">
              <h2 class="caps mb-1">Projects</h2>
              <div>
                {projectData.map(p => (
                  <div key={p.name} class="project-row">
                    <h3 class="m-0">{p.name} <span class="muted text-xs">â€¢ {p.formattedDate}</span></h3>
                    {p.summary ? (<div class="muted text-sm">{p.summary}</div>) : null}
                  </div>
                ))}
              </div>
            </section>
          ) : null}

          <!-- Volunteer -->
          {volunteerData.length ? (
            <section class="card avoid-break mt-3">
              <h2 class="caps mb-1">Volunteer</h2>
              <div>
                {volunteerData.map(v => (
                  <div key={v.organization} class="vol-row">
                    <h3 class="m-0">{v.position || v.organization} <span class="muted text-xs">â€¢ {v.formattedDate}</span></h3>
                    {v.summary ? (<div class="muted text-sm">{v.summary}</div>) : null}
                  </div>
                ))}
              </div>
            </section>
          ) : null}

        </main>
      </div>

      <div class="controls print-hidden">
        <button id="printBtn" class="btn" type="button" onclick="window.print()">Print / Save PDF</button>
        <a id="downloadJson" class="btn secondary" style="text-decoration:none">Download JSON</a>
      </div>
    </div>

    <script type="module">
      // client-side helpers â€” safe because data is serialized server-side above
      const RESUME = JSON.parse({JSON.stringify(__RESUME_FOR_CLIENT)});

      document.getElementById('printBtn')?.addEventListener('click', () => window.print());

      const downloadBtn = document.getElementById('downloadJson');
      if (downloadBtn) {
        const data = JSON.stringify(RESUME, null, 2);
        const blob = new Blob([data], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        downloadBtn.setAttribute('href', url);
        downloadBtn.setAttribute('download', (RESUME.basics.name || 'resume').toLowerCase().replace(/\s+/g,'-') + '.json');
      }
    </script>
  </body>
</html>
